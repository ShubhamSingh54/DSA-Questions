given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y â‰¤ x.
Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

Note: Return -1 if you can't reach the end of the array.


Example 1:

Input:
N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 
Output: 3 
Explanation: 
First jump from 1st element to 2nd 
element with value 3. Now, from here 
we jump to 5th element with value 9, 
and from here we will jump to the last. 


ans-->


int minJumps(int arr[], int n){
        int jumps = 0, currentJumpEnd = 0, farthest = 0;
        
        for(int i = 0; i < n - 1; i++) {
            farthest = max(farthest, i + arr[i]);
            
            if (i == farthest) return -1;
            
            if (i == currentJumpEnd) {
                jumps++; currentJumpEnd = farthest;
            }
        }
        
        return jumps;
}


The function tracks the farthest index that can be reached and the end of the current jump range.
It increments the jump count each time the end of the current range is reached and updates the range based on the farthest reachable index.
If at any point the current index equals the farthest index, it means we're stuck, and the function returns -1.
The loop runs until the second-to-last index, and the function returns the total number of jumps required to reach or surpass the last index.
This approach is efficient and works in O(n) time complexity.
