Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
solution 
we basically uses the moore's voting methord here question mentioned that majority element always present in the array then we take one element as our majority element
and taking frequency as a variable and initialize it 0; in the look compare each element with our assumed majority element if it is true then increase the value of 
frequency by one and in false condition decreament the value of frequency
and also compare if the value of frequency becomes 0 then change our majority element to the array element and also initialize the value of frequency one.
int majorityElement(vector<int>& nums) {
        
        int m=nums[0];
        int fq=0;
        for(int i=0;i<nums.size();i++)
        {

            if(m==nums[i])
            {
                fq++;
            }
            else
            {
                fq--;
            }
            
            if(fq==0)
            {
                m=nums[i];
                fq=1;
            }
        }
        return m;
 
