Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.


solution ---->
you have to use the logic of conversion of all numbers into -ve numbers and return that index place where number is positive
boundary condition check separetaly for 0, and assing the value of 0= any number such as n+1 and make -ve of that number that is present on 0th index;

code--->
int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int i=0,flag=0,b1=0;
        
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                nums[i]=(n+1);
                nums[0]=-nums[0];
                b1=1;
                
            }
        }
        if(b1=0)
        {
            return 0;
        }
        for( i=0;i<n;i++)
        {   int a=abs(nums[i]);
         if(a>=n)
         {
          flag=1;
             continue;
         }
            nums[a]=-nums[a];

            
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]>0)
                return i;
        }
        
        
       if(flag==0)
       {
           return n;
       }
        
       return n; 
    }
